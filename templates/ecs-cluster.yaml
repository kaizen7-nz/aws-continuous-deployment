Parameters:
  ContainerName:
    Type: String

  # KeyName definition from:
  # https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/services/AutoScaling/AutoScalingRollingUpdates.yaml
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Type: String
    Default: t2.small

  ClusterSize:
    Type: Number
    Default: 1

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

  ElasticLoadBalancer:
    Type: String

  SourceSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  VpcId:
    Type: AWS::EC2::VPC::Id

Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMI: ami-6df8fe7a
    us-east-2:
      AMI: ami-c6b5efa3
    us-west-1:
      AMI: ami-1eda8d7e
    us-west-2:
      AMI: ami-a2ca61c2
    eu-west-1:
      AMI: ami-ba346ec9
    eu-west-2:
      AMI: ami-42c5cf26
    eu-central-1:
      AMI: ami-e012d48f
    ap-northeast-1:
      AMI: ami-08f7956f
    ap-southeast-1:
      AMI: ami-f4832f97
    ap-southeast-2:
      AMI: ami-774b7314
    ca-central-1:
      AMI: ami-be45f7da

Resources:
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ec2.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-hosts
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref SourceSecurityGroup
          IpProtocol: -1
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      # Check health from load balancer:
      # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html#cfn-as-group-healthchecktype
      # HealthCheckType: ELB
      # http://docs.aws.amazon.com/autoscaling/latest/userguide/as-add-elb-healthcheck.html
      # HealthCheckGracePeriod: 300 # 300 Seconds: 5 Minutes.
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref ClusterSize
      # MinInstancesInService must be less than the autoscaling group's MaxSize
      MaxSize: 2
      DesiredCapacity: !Ref ClusterSize
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName} - ECS Host
          PropagateAtLaunch: true
    # Creation policy configuration docs:
    # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-creationpolicy.html
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
    # Update policy configuration docs:
    # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT30M # Needs to be long enough to roll out stack?
        WaitOnResourceSignals: true

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          full_install: [install_cfn, verify_instance_health]
        install_cfn:
          commands:
            # Reference commands here: http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html
            01_register_logging_plugins:
              command: echo ECS_AVAILABLE_LOGGING_DRIVERS='["json-file","splunk"]' > /etc/ecs/ecs.config
            02_cleanup_faster_than_3h:
              command: echo ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=20m >> /etc/ecs/ecs.config
            03_add_instance_to_cluster:
              command: !Sub echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration --configsets full_install
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        verify_instance_health:
          commands:
            # Stack health check idea from: https://blog.newrelic.com/2016/08/24/docker-health-check-instruction/
            # Docker reference: https://docs.docker.com/engine/reference/builder/#healthcheck
            ELBHealthCheck:
              command: !Sub |
                #!/bin/bash
                until [ "$state" == "\"healthy\"" ]; do state=$(docker inspect --format='{{json .State.Health.Status}}' ${ContainerName}); sleep 10; done

    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AMI ]
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      # KeyName see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-ecs.html
      # To create a key in AWS ec2 console: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#having-ec2-create-your-key-pair
      KeyName: !Ref 'KeyName'
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackId} --resource LaunchConfiguration --configsets full_install
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackId} --resource AutoScalingGroup

Outputs:
  ClusterName:
      Value: !Ref Cluster
